# -*- coding: utf-8 -*-
"""Python_06_funcoes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EcpjpUOC5GZtQdZYdHEkzzhxu1WrM7Z5
"""

#USANDO FUNÇÕES

#Calculando médias de estudantes

#Notas do(a) estudante
notas = {'1º Tri': 8.5,'2º Tri': 9.5,'3º Tri': 7}
print(notas)

#Calculando a soma
soma = 0

for nota in notas.values(): #transforma os valores em uma lista de iteráveis
  soma += nota

print(soma)

#BUILT- IN FUNCTIONS

#Usando a função embutida  sum()
somatorio = sum(notas.values())
soma

#Usando a função embutida len()
qtd_notas = len(notas)
print(qtd_notas)

#Calculando a média
media = somatorio / qtd_notas
print(media)

#Arredondando a média com round()
media_ar = round(media,1)
print(media_ar)

#CRIANDO AS PRÓPRIAS FUNÇÕES

#criando uma função sem parâmetro
def media():
  calculo = (10+9+8)/3
  print(calculo)

#chamando a função
media()

#criando uma função com parâmtro
def media2(nota_1, nota_2, nota_3):
  calculo = (nota_1 + nota_2 + nota_3) / 3
  print(calculo)

#chamando a função e passando os parâmetros
media2(3,6,9)

#usando listas como parâmetros

#notas do estudante
notas = [8.5, 9.0,6.0, 10.0]

def media3(lista):
  calculo2 = sum(lista) / len(lista)
  print(calculo2)

media3(notas)

#colocando o valor em uma variavel
resultado = media3(notas)

#FUNÇÕES QUE RETORNAM VALORES

# Notas do(a) estudante
notas = [8.5, 9.0, 6.0, 10.0]

#criando a função com retorno
def media(lista):
    calculo = sum(lista) / len(lista)
    return calculo

#criando a variável com o resultado da função
resultado = media(notas)

#solicitando o resultado
resultado

#INCREMENTANDO A FUNÇÃO
notas = [6.0, 7.0, 9.0, 5.0]

def boletim(lista):
  media = sum(lista)/len(lista)

  if media >= 6:
    situacao = "Aprovado(a)" #passa o resultado para uma variável
  else:
    situacao = "Reprovado(a)"

  return (media, situacao) #passa as variáveis como uma tupla no return

boletim(notas)

media, situacao = boletim(notas) #separando a tupla

print(f'O(a) estudante atingiu uma média de {media} e foi {situacao}.') #puxando os valores da tupla separadamente

#FUNÇÃO LAMBDA

# Recebendo as notas e calculando a média ponderável
N1 = float(input("Digite a 1ª nota do(a) estudante: "))
N2 = float(input("Digite a 2ª nota do(a) estudante: "))
N3 = float(input("Digite a 3ª nota do(a) estudante: "))

media_ponderavel = lambda x, y, z: (x * 3 + y * 2 + z * 5)/10 #função lambda, que pode ser descrita em uma única linha. 3, 2, 5 = peso da nota
media_estudante = media_ponderavel(N1,N2,N3)
media_estudante

print(f'O(a) estudante atingiu uma média de {media_estudante}')
#exibindo a media

#ATRELANDO O USO DO LAMBDA AO MAP

#criando uma função que adiciona uma pontuação extra na nota de determinados estudantes

#Notas do estudante
notas = [6.0,7.0,9.0,5.5,8.0]
qualitativo = 0.5

#usando a função map com a lambda
notas_atualizadas = map(lambda x: x + qualitativo,notas) #(função lambda onde x = lista,iterável)
notas_atualizadas

notas_atualizadas = list(notas_atualizadas) #retornando as notas como uma lista

notas_atualizadas